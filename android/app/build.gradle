apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

project.ext.vectoricons = [
    iconFontNames: [ 'MaterialCommunityIcons.ttf' ] // Name of the font files you want to copy
]

import com.android.build.OutputFile

react {
    // ... your existing react config ...
}

def enableSeparateBuildPerCPUArchitecture = true
def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.orangehrm.opensource"
    defaultConfig {
        manifestPlaceholders = [
            appAuthRedirectScheme: 'com.orangehrm.opensource'
        ]
        applicationId "com.orangehrm.opensource"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode "${ORANGEHRM_VERSION_CODE}".toInteger()
        versionName "${ORANGEHRM_VERSION_NAME}"
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // Generate universal APK as well
            include (*reactNativeArchitectures())
        }
    }

    signingConfigs {
        debug {
            // Use default debug keystore path
            storeFile file(System.getenv("HOME") + "/.android/debug.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('ORANGEHRM_UPLOAD_STORE_FILE')) {
                storeFile file(ORANGEHRM_UPLOAD_STORE_FILE)
                storePassword ORANGEHRM_UPLOAD_STORE_PASSWORD
                keyAlias ORANGEHRM_UPLOAD_KEY_ALIAS
                keyPassword ORANGEHRM_UPLOAD_KEY_PASSWORD
            } else {
                // For quick testing, fallback to debug keystore signing
                storeFile file(System.getenv("HOME") + "/.android/debug.keystore")
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesAppBuildGradle(project)
